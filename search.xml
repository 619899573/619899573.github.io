<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端面试题：从url到页面展现，这之中发生了什么]]></title>
    <url>%2F2017%2F09%2F15%2F%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A%E4%BB%8Eurl%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0%EF%BC%8C%E8%BF%99%E4%B9%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[我们平常在地址栏里输入一些网址时，页面很快就会出现，但在这之中到底发生了什么事情呢？ 大概是这样的流程： 在浏览器的地址栏中敲入了url 域名解析 服务器处理请求 浏览器处理 绘制网页 一、在浏览器的地址栏中敲入了url首先，我们要知道url是什么？URL（Uniform Resource Locator），统一资源定位符，用于定位互联网上的资源，实际上就是网站网址。url的格式一般为： 协议类型://&lt;主机名&gt;:&lt;端口&gt;/&lt;路径&gt;/文件名 其中协议类型可以是http（超文本传输协议）、https、ftp（文件传输协议）、telnet（远程登录协议）、file等等。而http是最常见的网络传输协议，https则是进行加密的网络传输。 例如，我的简书url为http://www.jianshu.com/u/b473784d730c，其中，“http”表示与web服务器通讯采用http协议，简书web服务器域名为www.jianshu.com，u/b473784d730c表示所访问的文件存在于web服务器上的路径。 url格式中主机名冒号后面的数字是端口编号，因为一台计算机常常会同时作为Web，FTP等服务器，端口编号用来告诉web服务器所在的主机要将请求交给哪个服务。默认情况下http服务的端口为80，不需要在url中输入，如果web服务器采用的不是这一个默认端口，就需要写明服务所用的端口。常见的协议默认端口如下： 协议类型 默认端口 http 80 ftp 21 https 443 telnet 23 IP是什么IP是因特网中的每台连接到网络的计算机为实现相互通信而遵循的规则协议。每个处于互联网中的设备都有IP 地址，形如 192.168.0.1，而127.0.0.1代表本机的 IP。IP又分为局域网IP和公网IP。而局域网 IP 和公网 IP 是有差别的。每个网站就是靠IP来定位的。 为了便于记忆或辨识，人们使用域名来登录网站，每个域名背后有对应的IP地址。 比如对于 http://www.jianshu.com的URL，浏览器实际上不知道 www.jianshu.com到底是什么东西，需要查找www.jianshu.com网站所在服务器的IP地址，才能找到目标，这就是下文要说的域名解析。 二、域名解析当用户在浏览器中输入url后 查找浏览器缓存 浏览器会检查缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就将结束。Chrome浏览器看本身的DNS缓存时间比较方便，在地址栏输入chrome://net-internals/#dns，就可以看到了 查找操作系统缓存 如果用户的浏览器缓存中没有，浏览器会从hosts文件查找是否有存储DNS信息，查找是否有目标域名和对应的IP地址 查找路由器缓存 如果系统缓存中也找不到，那么查询请求就会发向路由器，路由器一般会有自己的DNS缓存。 查找ISP DNS 缓存 如果路由器缓存中也找不到，那么就查询ISP DNS 缓存服务器了。我们都知道在我们的网络配置中都会有”DNS服务器地址”这一项，操作系统会把这个域名发送给这里设置的DNS，比如114.114.114.114,也就是本地区的域名服务器，通常是提供给你接入互联网的应用提供商。而114.114.114.114是国内移动、电信和联通通用的DNS。 递归查找 如果前面都找不到DNS缓存的话，会有以下几个步骤： 本地DNS服务器将该请求转发到互联网上的根域（根域没有名字，在DNS系统中就用一个空字符串来表示。例如www.baidu.com.现在的DNS系统都不会要求域名以.来结束，即www.baidu.com就可以解析了，但是现在很多DNS解析服务商还是会要求在填写DNS记录的时候以.来结尾域名。） 根域将所要查询域名中的顶级域（比如要查询www.baidu,com，该域名的顶级域就是com）的服务器IP地址返回到本地DNS。 本地DNS根据返回的IP地址，再向顶级域（就是com域）发送请求， com域服务器再将域名中的二级域（即www.baidu.com中的baidu.com）的IP地址返回给本地DNS。 本地DNS再向二级域发送请求进行查询。 之后不断重复这样的过程，直到本地DNS服务器得到最终的查询结果，并返回到主机。这时候主机才能通过域名访问该网站。 下图能很好的说明这个递归查找: 当查找到对应的IP地址之后，通过IP地址查找到对应的服务器，浏览器将用户发起的http请求发送给服务器。例如：GET http://www.baidu.com/ HTTP/1.1 三、服务器处理请求每台服务器上都会安装处理请求的应用——Web server。常见的web server产品有apache、nginx、IIS、Lighttpd等。 当web server接收到一个HTTP请求(request)，会返回一个HTTP响应(response)，例如送回一个HTML页面。对于不同用户发送的请求，会结合配置文件，把不同请求委托给服务器上处理对应请求的程序进行处理（例如CGI脚本，JSP脚本，servlets，ASP脚本，服务器端JavaScript，或者一些其它的服务器端技术等）。 无论它们(脚本)的目的如何，这些服务器端(server-side)的程序通常产生一个HTML的响应(response)来让浏览器可以浏览。 那么如何处理请求？实际上就是后台处理的工作。后台开发现在有很多框架，但大部分都还是按照MVC设计模式进行搭建的。 处理的过程如下图： MVC的处理过程是这样的：对于每一个用户输入的请求，首先被控制器接收，控制器决定用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器确定用哪个视图模型，用相应的视图格式化模型返回html字符串给浏览器，并通过显示页面呈现给用户。 四、浏览器处理接下来就是浏览器进行处理， 通过后台处理返回的HTML字符串被浏览器接受后被一句句读取解析，html页面经历加载、解析、渲染。 加载浏览器对一个html页面的加载顺序是从上而下的。如果加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。 解析 解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树，也就是DOM树。如下图： css解析是指将css文件解析为样式表对象。如下图： js解析是文件在加载的同时也进行解析如果想深入如何解析的话可以看浏览器的工作原理：新式网络浏览器幕后揭秘这篇文章 渲染 即为构建渲染树的过程，就是将DOM树进行可视化表示。构建这棵树是为了以正确的顺序绘制文档内容。 五、绘制网页浏览器根据 HTML 和 CSS 计算得到渲染树，最终绘制到屏幕上 参考的文章：前端经典面试题: 从输入URL到页面加载发生了什么？What really happens when you navigate to a URL从URL输入到页面展现MVC模型结构是什么域名详解浏览器~加载，解析，渲染]]></content>
      <categories>
        <category>理论</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 学习笔记]]></title>
    <url>%2F2017%2F08%2F08%2FGit%2F</url>
    <content type="text"><![CDATA[写在前面 本文档是学习 廖雪峰Git教程 后所做的笔记，教程帮忙很大，非常感谢！ 本笔记主要记录了教程中所用的命令，概念内容不包括在内。 建议看完教程后再看Git官网的 Pro Git 一书。 创建版本库 创建仓库并提交 命令代码 代码含义 git init 初始化一个Git仓库 git add &lt;file&gt; 添加文件到暂存区（-f 可强制添加） git commit -m &quot;提交说明&quot; 从暂存区提交到版本库 cat &lt;file&gt; 查看文件内容 时光机穿梭 查看仓库状态、差异 命令代码 代码含义 git status 查看仓库当前状态 git diff &lt;file&gt; 比较工作区和暂存区的差异 git diff --cached &lt;file&gt; 比较暂存区和版本库的差异 git diff HEAD -- &lt;file&gt; 比较工作区和版本库的差异 版本回退 命令代码 代码含义 git log 查看提交历史 git log -1 查看最后一次提交历史 git log -num 查看最后num次提交历史 git log --pretty=oneline 单行格式显示提交历史 git reflog 查看所有操作记录，包括删除的commit记录 git reset --hard commit_id 切换到指定版本 git reset --hard HEAD^ 回退上一个版本 HEAD 表当前版本， HEAD^ 表上一版本，HEAD^^ 表上两版本，HEAD~99 表上99版本。 撤销修改 命令代码 代码含义 git checkout -- file 撤销工作区的修改 git reset HEAD file 撤销暂存区的修改 已经提交了不合适的修改到版本库时，想要撤销本次提交，可以版本回退，不过前提是没有推送到远程库。 删除文件 命令代码 代码含义 git rm &lt;file&gt; 删除一个文件 如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 推送到远程库 关联远程库 命令代码 代码含义 git remote add origin git@github.com:Jason-lhh/learngit.git 关联远程库 git remote -v 查看远程库信息 git push origin master 推送并关联指定分支到远程库 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 从远程库克隆 命令代码 代码含义 git clone git@github.com:Jason-lhh/gitskills.git 将远程仓库克隆到当前目录 git pull 拉取远程仓库内容 先有远程库，后有本地库。要克隆一个仓库，首先必须知道仓库的地址，然后使用 git clone git@github.com:账户名/仓库名字.git 命令。 分支管理 创建与合并分支 命令代码 代码含义 git branch &lt;brach&gt; 创建分支 git branch 查看分支 git checkout &lt;brach&gt; 切换分支 git checkout -b &lt;brach&gt; 创建+切换分支 git merge &lt;brach&gt; 合并某分支到当前分支（fast forward模式） git merge --no-ff &lt;branch&gt; 禁用快速合并 git merge --no-ff -m &quot;提交说明&quot; &lt;branch&gt; 普通方式合并，并附提交说明 git stash 保存当前工作环境（包括工作区和暂存区） git stash list 查看保存的工作列表 git branch -d &lt;name&gt; 删除分支 git branch -D &lt;name&gt; 强制删除分支 git log --graph --pretty=oneline --abbrev-commit 查看分支合并图 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。 分支管理策略图 Bug分支 git stash list 查看当前工作现场git status 可以用查看工作区是干净的 多人协作 多人协作的工作模式通常是这样： 首先，可以试图用git push origin branch-name推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！ 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。 这就是多人协作的工作模式，一旦熟悉了，就非常简单。 标签管理 标签 命令代码 代码含义 git tag 查看所有标签 git tag &lt;tag_name&gt; 用于当前分支新建一个标签 git tag &lt;tag_name&gt; &lt;commit_id&gt; 给指定commit打标签 git tag -a &lt;tag_name&gt; -m &quot;标签说明&quot; &lt;commit_id&gt; 给指定commit打标签，并附说明 git tag -s &lt;tag_name&gt; -m &quot;标签说明&quot; &lt;commit_id&gt; 用gpg私钥签名 git tag -d &lt;tag_name&gt; 删除标签 git show &lt;tag_name&gt; 显示标签信息 git push origin &lt;tag_name&gt; 推送标签到远程库 git push origin --tags 推送所有未推送的标签到远程库 git push origin :refs/tags/&lt;tag_name&gt; 删除远程标签（先删除本地，再使用该命令删除） 自定义Git 修改git样式 命令代码 代码含义 git config --global user.name &quot;you_name&quot; 设置全局用户名 git config --global user.email &quot;email@example.com&quot; 设置全局邮箱 git config --global color.ui true 设置全局颜色显示 git config --global alias.&lt;alias_name&gt; &lt;&#39;command_name&#39;&gt; 设置别名 忽略特殊文件 命令代码 代码含义 git check-ignore -v &lt;file&gt; 查看忽略该文件的规则 配置别名列表 命令代码 代码含义 git config --global alias.st status git st git config --global alias.co checkout git checkout &lt;branch_name&gt; git config --global alias.ci commit git ci -m &quot;提交说明&quot; git config --global alias.br branch git br git confg alias.unstage &#39;reset HEAD&#39; git unstage &lt;file&gt; git confg alias.last &#39;log -1&#39; git last 最近一次提交 git confg alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot; git lg 查看提交历史 搭建Git服务器 st=>start: 修复bug th=>operation: git stash 保存当前工作环境 op=>operation: 切换master分支创建 切换bug分支修复 op1=>operation: 合并bug分支 删除bug分支 en=>operation: git stash pop 回到工作现场 e=>end: 完成 st->th->op->op1->en->e{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我来安利一下 Cmd Markdown 编辑阅读器]]></title>
    <url>%2F2017%2F07%2F28%2FMarkdown%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8%2F</url>
    <content type="text"><![CDATA[我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。 [4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-referencest=>start: Start op=>operation: Your Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>